#!/usr/bin/env python3
import sys
import os
import shutil
import time

def main():
    # Set environment variables for Render deployment
    os.environ['YOLO_CONFIG_DIR'] = '/tmp'
    os.environ['ULTRALYTICS_CONFIG_DIR'] = '/tmp'
    os.environ['TORCH_HOME'] = '/tmp/torch'
    os.environ['HF_HOME'] = '/tmp/huggingface'
    
    print("üêç YOLO Detection Script Started")
    print(f"üêç Python version: {sys.version}")
    print(f"üêç Current working directory: {os.getcwd()}")
    print(f"üêç Config dir: {os.environ.get('YOLO_CONFIG_DIR', 'default')}")
    
    if len(sys.argv) != 2:
        print("‚ùå Usage: python detect.py <image_path>")
        sys.exit(1)
    
    image_path = sys.argv[1]
    print(f"üñºÔ∏è Input image: {image_path}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if not os.path.exists(image_path):
        print(f"‚ùå Error: Image file not found: {image_path}")
        sys.exit(1)
    
    print(f"‚úÖ Input image exists ({os.path.getsize(image_path)} bytes)")
    
    try:
        print("üì¶ Importing required packages...")
        
        # Import ultralytics
        try:
            from ultralytics import YOLO
            print("‚úÖ Ultralytics imported successfully")
        except ImportError as e:
            print(f"‚ùå Cannot import ultralytics: {e}")
            print("üí° Please install: pip install ultralytics")
            
            # Fallback: copy original image
            fallback_copy(image_path)
            return
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8
        print("ü§ñ Loading YOLOv8 model...")
        
        # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î model
        model_paths = [
            'yolov8n.pt',           # Default YOLOv8 nano
            'yolov8s.pt',           # YOLOv8 small
            './yolov8n.pt',         # ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            './best.pt',            # custom model ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            '../best.pt',           # custom model ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏ô
            'best.pt'               # custom model
        ]
        
        model = None
        for model_path in model_paths:
            try:
                print(f"üîç Trying to load model: {model_path}")
                
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                if os.path.exists(model_path):
                    model = YOLO(model_path)
                    print(f"‚úÖ Loaded existing model: {model_path}")
                    break
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô pretrained model ‡∏à‡∏≤‡∏Å ultralytics
                elif model_path in ['yolov8n.pt', 'yolov8s.pt', 'yolov8m.pt', 'yolov8l.pt', 'yolov8x.pt']:
                    try:
                        print(f"üì• Downloading pretrained model: {model_path}")
                        model = YOLO(model_path)
                        print(f"‚úÖ Downloaded and loaded: {model_path}")
                        break
                    except Exception as download_error:
                        print(f"‚ö†Ô∏è Failed to download {model_path}: {download_error}")
                        continue
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Error loading {model_path}: {e}")
                continue
        
        if model is None:
            print("‚ùå Could not load any YOLO model")
            print("üîÑ Using fallback method...")
            fallback_copy(image_path)
            return
        
        print("‚úÖ YOLOv8 model loaded successfully")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        runs_dir = os.path.join(os.getcwd(), 'runs')
        detect_dir = os.path.join(runs_dir, 'detect')
        
        print(f"üìÅ Output directory: {runs_dir}")
        
        # ‡∏ó‡∏≥ Object Detection
        print("üîç Running YOLOv8 detection...")
        results = model(
            image_path,
            save=True,          # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            project=runs_dir,   # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
            name='detect',      # ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
            exist_ok=True,      # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
            conf=0.25,          # confidence threshold
            verbose=True        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        )
        
        print("‚úÖ Detection completed!")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        total_detections = 0
        for i, result in enumerate(results):
            if hasattr(result, 'boxes') and result.boxes is not None:
                num_detections = len(result.boxes)
                total_detections += num_detections
                print(f"üìä Image {i+1}: Found {num_detections} objects")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ object
                for j, box in enumerate(result.boxes):
                    class_id = int(box.cls[0])
                    confidence = float(box.conf[0])
                    class_name = model.names[class_id]
                    
                    # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á bounding box
                    x1, y1, x2, y2 = box.xyxy[0].tolist()
                    
                    print(f"  üéØ Object {j+1}: {class_name} ({confidence:.2%}) at [{int(x1)},{int(y1)},{int(x2)},{int(y2)}]")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            if hasattr(result, 'save_dir'):
                print(f"üíæ Results saved to: {result.save_dir}")
        
        print(f"üéâ Detection Summary: {total_detections} objects detected total")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        verify_output_files(detect_dir)
        
    except Exception as e:
        print(f"‚ùå Error during detection: {str(e)}")
        import traceback
        traceback.print_exc()
        
        # Fallback
        print("üîÑ Using fallback method...")
        fallback_copy(image_path)

def fallback_copy(image_path):
    """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏ú‡∏ô: ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤ YOLO ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    try:
        runs_dir = os.path.join(os.getcwd(), 'runs')
        detect_dir = os.path.join(runs_dir, 'detect')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ timestamp
        timestamp = int(time.time())
        result_dir = os.path.join(detect_dir, f'predict{timestamp}')
        os.makedirs(result_dir, exist_ok=True)
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
        result_filename = os.path.basename(image_path)
        result_path = os.path.join(result_dir, result_filename)
        shutil.copy2(image_path, result_path)
        
        print(f"üìã Fallback: Copied original image to {result_path}")
        print("‚ö†Ô∏è Note: No actual object detection was performed")
        
    except Exception as e:
        print(f"‚ùå Fallback failed: {e}")
        sys.exit(1)

def verify_output_files(detect_dir):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô"""
    try:
        if not os.path.exists(detect_dir):
            print(f"‚ö†Ô∏è Detection directory not found: {detect_dir}")
            return
        
        # ‡∏´‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        subdirs = [d for d in os.listdir(detect_dir) 
                  if os.path.isdir(os.path.join(detect_dir, d))]
        
        if not subdirs:
            print("‚ö†Ô∏è No result subdirectories found")
            return
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° modified time
        subdirs.sort(key=lambda x: os.path.getmtime(os.path.join(detect_dir, x)), reverse=True)
        latest_dir = os.path.join(detect_dir, subdirs[0])
        
        print(f"üìÇ Latest result directory: {latest_dir}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        files = os.listdir(latest_dir)
        print(f"üìÑ Files created: {files}")
        
        for file in files:
            file_path = os.path.join(latest_dir, file)
            size = os.path.getsize(file_path)
            print(f"   ‚Ä¢ {file} ({size} bytes)")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error verifying output: {e}")

if __name__ == "__main__":
    main()