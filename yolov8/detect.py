#!/usr/bin/env python3
import sys
import os
import shutil
import time
from datetime import datetime

def main():
    # Set environment variables for Render deployment
    os.environ['YOLO_CONFIG_DIR'] = '/tmp'
    os.environ['ULTRALYTICS_CONFIG_DIR'] = '/tmp'
    os.environ['TORCH_HOME'] = '/tmp/torch'
    os.environ['HF_HOME'] = '/tmp/huggingface'
    
    
    print("üêç YOLO Detection Script Started")
    print(f"üêç Python version: {sys.version}")
    print(f"üêç Current working directory: {os.getcwd()}")
    print(f"üêç Script directory: {os.path.dirname(os.path.abspath(__file__))}")
    print(f"üêç Parent directory: {os.path.dirname(os.path.dirname(os.path.abspath(__file__)))}")
    print(f"üêç Config dir: {os.environ.get('YOLO_CONFIG_DIR', 'default')}")
    
    if len(sys.argv) != 2:
        print("‚ùå Usage: python detect.py <image_path>")
        sys.exit(1)
    
    image_path = sys.argv[1]
    print(f"üñºÔ∏è Input image: {image_path}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if not os.path.exists(image_path):
        print(f"‚ùå Error: Image file not found: {image_path}")
        sys.exit(1)
    
    print(f"‚úÖ Input image exists ({os.path.getsize(image_path)} bytes)")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö model files ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    print("üîç Scanning for YOLO model files...")
    check_model_files()
    
    try:
        print("üì¶ Importing required packages...")
        
        # Import ultralytics
        try:
            from ultralytics import YOLO
            print("‚úÖ Ultralytics imported successfully")
        except ImportError as e:
            print(f"‚ùå Cannot import ultralytics: {e}")
            print("üí° Please install: pip install ultralytics")
            
            # Fallback: copy original image
            fallback_copy(image_path)
            return
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8
        print("ü§ñ Loading YOLOv8 model...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå best.pt ‡∏Å‡πà‡∏≠‡∏ô
        print("üîç Checking for custom model files...")
        current_dir_files = os.listdir('.')
        print(f"üìÅ Files in current directory: {[f for f in current_dir_files if f.endswith('.pt')]}")
        
        # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î model ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á directory structure
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á src/ ‡πÅ‡∏•‡∏∞ server/ structure
        model_paths = [
            './best.pt',                    # ‡πÉ‡∏ô current folder
            '../best.pt',                   # ‡πÉ‡∏ô parent folder
            '../../best.pt',                # ‡πÉ‡∏ô project root
            './server/yolov8/best.pt',      # server structure ‡∏à‡∏≤‡∏Å root
            '../server/yolov8/best.pt',     # server structure ‡∏à‡∏≤‡∏Å parent
            './yolov8/best.pt',             # yolov8 subfolder
            '../yolov8/best.pt',            # yolov8 in parent
            '../../server/yolov8/best.pt',  # server structure ‡∏à‡∏≤‡∏Å deeper level
            './models/best.pt',             # models folder
            '../models/best.pt',            # models in parent
            'best.pt',                      # relative path
            'yolov8n.pt',                   # fallback to nano model
            'yolov8s.pt',                   # small model
        ]
        
        model = None
        for model_path in model_paths:
            try:
                print(f"üîç Trying to load model: {model_path}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                if os.path.exists(model_path):
                    file_size = os.path.getsize(model_path)
                    print(f"üìÑ Found {model_path} ({file_size} bytes)")
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
                    if file_size == 0:
                        print(f"‚ö†Ô∏è {model_path} is empty, skipping...")
                        continue
                    
                    try:
                        model = YOLO(model_path)
                        print(f"‚úÖ Loaded existing model: {model_path}")
                        break
                    except Exception as load_error:
                        print(f"‚ùå Failed to load {model_path}: {load_error}")
                        continue
                else:
                    print(f"‚ùå File not found: {model_path}")
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô pretrained model ‡∏à‡∏≤‡∏Å ultralytics
                if model_path in ['yolov8n.pt', 'yolov8s.pt', 'yolov8m.pt', 'yolov8l.pt', 'yolov8x.pt']:
                    try:
                        print(f"üì• Downloading pretrained model: {model_path}")
                        model = YOLO(model_path)
                        print(f"‚úÖ Downloaded and loaded: {model_path}")
                        break
                    except Exception as download_error:
                        print(f"‚ö†Ô∏è Failed to download {model_path}: {download_error}")
                        continue
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Error loading {model_path}: {e}")
                continue
        
        if model is None:
            print("‚ùå Could not load any YOLO model")
            print("üîÑ Using fallback method...")
            fallback_copy(image_path)
            return
        
        print("‚úÖ YOLOv8 model loaded successfully")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp
        runs_dir = os.path.join(os.getcwd(), 'runs')
        detect_base_dir = os.path.join(runs_dir, 'detect')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á unique subdirectory name
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        detect_subdir = f"predict_{timestamp}"
        final_output_dir = os.path.join(detect_base_dir, detect_subdir)
        
        print(f"üìÅ Output directory: {final_output_dir}")
        
        # ‡∏ó‡∏≥ Object Detection
        print("üîç Running YOLOv8 detection...")
        results = model(
            image_path,
            save=True,              # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            project=runs_dir,       # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
            name=f'detect/{detect_subdir}',  # ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏ö‡∏ö nested
            exist_ok=True,          # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
            conf=0.25,              # confidence threshold
            verbose=True            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        )
        
        print("‚úÖ Detection completed!")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        total_detections = 0
        result_save_dir = None
        
        for i, result in enumerate(results):
            if hasattr(result, 'save_dir'):
                result_save_dir = str(result.save_dir)
                print(f"üíæ Results saved to: {result_save_dir}")
            
            if hasattr(result, 'boxes') and result.boxes is not None:
                num_detections = len(result.boxes)
                total_detections += num_detections
                print(f"üìä Image {i+1}: Found {num_detections} objects")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ object
                for j, box in enumerate(result.boxes):
                    class_id = int(box.cls[0])
                    confidence = float(box.conf[0])
                    class_name = model.names[class_id]
                    
                    # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á bounding box
                    x1, y1, x2, y2 = box.xyxy[0].tolist()
                    
                    print(f"  üéØ Object {j+1}: {class_name} ({confidence:.2%}) at [{int(x1)},{int(y1)},{int(x2)},{int(y2)}]")
        
        print(f"üéâ Detection Summary: {total_detections} objects detected total")
        
        # Manual verification and backup
        if result_save_dir and os.path.exists(result_save_dir):
            verify_and_backup_results(result_save_dir, image_path)
        else:
            print("‚ö†Ô∏è Result directory not found, using fallback")
            fallback_copy(image_path)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        verify_output_files(detect_base_dir)
        
    except Exception as e:
        print(f"‚ùå Error during detection: {str(e)}")
        import traceback
        traceback.print_exc()
        
        # Fallback
        print("üîÑ Using fallback method...")
        fallback_copy(image_path)

def verify_and_backup_results(result_dir, original_image_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    try:
        print(f"üîç Verifying results in: {result_dir}")
        
        if not os.path.exists(result_dir):
            print(f"‚ö†Ô∏è Result directory doesn't exist: {result_dir}")
            return False
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        image_files = []
        for file in os.listdir(result_dir):
            if file.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tiff')):
                image_files.append(file)
        
        if not image_files:
            print("‚ö†Ô∏è No image files found in result directory")
            return False
        
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà predictable
        backup_dir = os.path.join(os.getcwd(), 'runs', 'detect')
        os.makedirs(backup_dir, exist_ok=True)
        
        original_filename = os.path.basename(original_image_path)
        backup_path = os.path.join(backup_dir, original_filename)
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
        source_file = os.path.join(result_dir, image_files[0])
        shutil.copy2(source_file, backup_path)
        
        print(f"‚úÖ Backup created: {backup_path}")
        print(f"üìÑ Backup size: {os.path.getsize(backup_path)} bytes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error in backup: {e}")
        return False

def check_model_files():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    try:
        # ‡πÅ‡∏™‡∏î‡∏á directory structure
        current_path = os.getcwd()
        parent_path = os.path.dirname(current_path)
        root_path = os.path.dirname(parent_path)
        
        print(f"üìç Current: {current_path}")
        print(f"üìç Parent:  {parent_path}")  
        print(f"üìç Root:    {root_path}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö current directory
        current_files = []
        for file in os.listdir('.'):
            if file.endswith('.pt'):
                size = os.path.getsize(file)
                current_files.append(f"{file} ({size} bytes)")
        
        if current_files:
            print(f"üìÑ .pt files in current directory: {current_files}")
        else:
            print("‚ùå No .pt files found in current directory")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö directories ‡∏£‡∏≠‡∏ö‡πÜ
        search_dirs = [
            ('current', '.'),
            ('parent', '..'),
            ('root', '../..'),
            ('server/yolov8', './server/yolov8'),
            ('server/yolov8 from parent', '../server/yolov8'),
            ('server/yolov8 from root', '../../server/yolov8'),
            ('yolov8', './yolov8'),
            ('yolov8 from parent', '../yolov8'),
            ('models', './models'),
            ('models from parent', '../models'),
        ]
        
        for desc, dir_path in search_dirs:
            try:
                if os.path.exists(dir_path) and os.path.isdir(dir_path):
                    pt_files = [f for f in os.listdir(dir_path) if f.endswith('.pt')]
                    if pt_files:
                        print(f"üìÅ Found .pt files in {desc} ({dir_path}): {pt_files}")
            except (OSError, PermissionError):
                continue
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ best.pt ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        print("üîç Searching specifically for best.pt...")
        found_best = False
        
        for desc, path in [
            ('current', './best.pt'),
            ('parent', '../best.pt'), 
            ('root', '../../best.pt'),
            ('server/yolov8', './server/yolov8/best.pt'),
            ('server/yolov8 from parent', '../server/yolov8/best.pt'),
            ('server/yolov8 from root', '../../server/yolov8/best.pt'),
        ]:
            if os.path.exists(path):
                size = os.path.getsize(path)
                abs_path = os.path.abspath(path)
                print(f"‚úÖ Found best.pt in {desc}: {abs_path} ({size} bytes)")
                found_best = True
        
        if not found_best:
            print("‚ùå best.pt not found in any expected locations")
            
            # ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Unix)
            try:
                import subprocess
                result = subprocess.run(['find', root_path, '-name', 'best.pt', '-type', 'f'], 
                                      capture_output=True, text=True, timeout=5)
                if result.stdout:
                    print(f"üîç System search found: {result.stdout.strip()}")
            except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.SubprocessError):
                pass
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error checking model files: {e}")

def fallback_copy(image_path):
    """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏ú‡∏ô: ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤ YOLO ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    try:
        runs_dir = os.path.join(os.getcwd(), 'runs')
        detect_dir = os.path.join(runs_dir, 'detect')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
        os.makedirs(detect_dir, exist_ok=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏î‡πâ‡∏ß‡∏¢ timestamp
        timestamp = int(time.time())
        result_subdir = os.path.join(detect_dir, f'predict{timestamp}')
        os.makedirs(result_subdir, exist_ok=True)
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
        result_filename = os.path.basename(image_path)
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility)
        main_result_path = os.path.join(detect_dir, result_filename)
        shutil.copy2(image_path, main_result_path)
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö structure ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        sub_result_path = os.path.join(result_subdir, result_filename)
        shutil.copy2(image_path, sub_result_path)
        
        print(f"üìã Fallback: Copied original image to:")
        print(f"   ‚Ä¢ Main: {main_result_path}")
        print(f"   ‚Ä¢ Sub:  {sub_result_path}")
        print("‚ö†Ô∏è Note: No actual object detection was performed")
        
    except Exception as e:
        print(f"‚ùå Fallback failed: {e}")
        sys.exit(1)

def verify_output_files(detect_dir):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô"""
    try:
        if not os.path.exists(detect_dir):
            print(f"‚ö†Ô∏è Detection directory not found: {detect_dir}")
            return
        
        print(f"üìÇ Contents of {detect_dir}: {os.listdir(detect_dir)}")
        
        # ‡∏´‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
        subdirs = [d for d in os.listdir(detect_dir) 
                  if os.path.isdir(os.path.join(detect_dir, d))]
        
        if not subdirs:
            print("‚ö†Ô∏è No result subdirectories found")
            # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
            files = [f for f in os.listdir(detect_dir) 
                    if os.path.isfile(os.path.join(detect_dir, f))]
            if files:
                print(f"üìÑ Direct files in detect dir: {files}")
            return
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° modified time
        subdirs.sort(key=lambda x: os.path.getmtime(os.path.join(detect_dir, x)), reverse=True)
        latest_dir = os.path.join(detect_dir, subdirs[0])
        
        print(f"üìÇ Latest result directory: {latest_dir}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        files = os.listdir(latest_dir)
        print(f"üìÑ Files created: {files}")
        
        for file in files:
            file_path = os.path.join(latest_dir, file)
            if os.path.isfile(file_path):
                size = os.path.getsize(file_path)
                print(f"   ‚Ä¢ {file} ({size} bytes)")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error verifying output: {e}")

if __name__ == "__main__":
    main()